#ifndef _SYLVESTER_MATRIX_
#define _SYLVESTER_MATRIX_
#include "BivariatePolynomial.h"
#include "Polynomial.h"
#include "Matrix.h"


class SylvesterMatrix
{
    unsigned int RowDimension, ColDimension;
    unsigned int d0,d1;
    Polynomial *** matrix;
    char hiddenVariable;
    void assignXCol(BivariatePolynomial * Bp, int power, int * & resultM);
    void assignYRow(BivariatePolynomial * Bp, int row, int * & resultM);
    void initMatrixWithHiddenX(BivariatePolynomial * Bp1, BivariatePolynomial * Bp2);
    void initMatrixWithHiddenY(BivariatePolynomial * Bp1, BivariatePolynomial * Bp2);
public:
    unsigned int getRowDimension()
    {
        return  RowDimension;
    }
    unsigned int getColDimension()
    {
        return  ColDimension;
    }
    char getHiddenVariable()
    {
        return  hiddenVariable;
    }
    Polynomial *** getMatrix()
    {
        return this->matrix;
    }
    int max(int, int);
    SylvesterMatrix(BivariatePolynomial * Bp1, BivariatePolynomial * Bp2);
    SylvesterMatrix(Polynomial ***, unsigned int, unsigned int);
    void allocMatrix();

    void Print();
    void multiply(Matrix * m, SylvesterMatrix*& result);
    int getMatrixRowMaxDegree(int Row);
    void assignZero(int deg, int*& temp);
    ~SylvesterMatrix();
};

#endif